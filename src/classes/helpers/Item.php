<?php

/**
 * Copyright Shopgate Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author    Shopgate Inc, 804 Congress Ave, Austin, Texas 78701 <interfaces@shopgate.com>
 * @copyright Shopgate Inc
 * @license   http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0
 */
class ShopgateVeytonHelperItem extends ShopgateVeytonHelperBase
{
    /**
     * @var int
     */
    private $languageCode;

    /**
     * @var array
     */
    private $permissionBlacklist;

    /**
     * @var int
     */
    private $shopId;

    /**
     * @var price
     */
    private $price;

    /**
     * @var array
     */
    private $currency;

    /**
     * @var int
     */
    private $defaultUserGroupId;

    /**
     * @var Shopgate_Helper_Pricing $priceHelper
     */
    private $priceHelper;

    /**
     * @var ShopgateVeytonHelperCheckPlugin
     */
    private $checkPluginHelper;

    /**
     * @var null
     */
    private $exportOffset = null;

    /**
     * @var null
     */
    private $exportLimit = null;

    /**
     * @var array
     */
    private $exportUids = array();

    /**
     * set limit and offset values for the exports
     *
     * @param int $limit
     * @param int $offset
     */
    public function setSplittedExportValues($limit, $offset)
    {
        $this->exportLimit  = $limit;
        $this->exportOffset = $offset;
    }

    /**
     * @param string[] $uids
     */
    public function setExportUids($uids)
    {
        $this->exportUids = $uids;
    }

    /**
     * @param mixed $shopId
     */
    public function setShopId($shopId)
    {
        $this->shopId = $shopId;
    }

    /**
     * @param Shopgate_Helper_Pricing $priceHelper
     */
    public function setPriceHelper(Shopgate_Helper_Pricing $priceHelper)
    {
        $this->priceHelper = $priceHelper;
    }

    /**
     * @param ShopgateVeytonHelperCheckPlugin $helper
     */
    public function setCheckPluginHelper(ShopgateVeytonHelperCheckPlugin $helper)
    {
        $this->checkPluginHelper = $helper;
    }

    /**
     * @param mixed $currency
     */
    public function setCurrency($currency)
    {
        $this->currency = $currency;
    }

    /**
     * @param $languageCode
     */
    public function setLanguageCode($languageCode)
    {
        $this->languageCode = $languageCode;
    }

    /**
     * @param mixed $price
     */
    public function setPrice($price)
    {
        $this->price = $price;
    }

    /**
     * @param mixed $permissionBlacklist
     */
    public function setPermissionBlacklist($permissionBlacklist)
    {
        $this->permissionBlacklist = $permissionBlacklist;
    }

    /**
     * @param mixed $defaultUserGroupId
     */
    public function setDefaultuserGroupId($defaultUserGroupId)
    {
        $this->defaultUserGroupId = $defaultUserGroupId;
    }

    /**
     * checks if a column named $column is available in a table named $table
     *
     * @param $table  the table name
     * @param $column the column name
     *
     * @return bool
     */
    public function checkColumn($table, $column)
    {
        $fields = $this->db->Execute("SHOW FIELDS FROM `" . $table . "`");
        foreach ($fields as $field) {
            if ($column == $field['Field']) {
                return true;
            }
        }

        return false;
    }

    /**
     * extract the real item uid from the uid generated by Shopgate
     * in the most cases this id has the syntax <product uid>_<product_attribute_id>
     *
     * @param ShopgateOrderItem $sgOrderItem
     *
     * @return string
     */
    public function getProductIdFromOrderItem(ShopgateOrderItem $sgOrderItem)
    {
        $parentId = $sgOrderItem->getParentItemNumber();
        if (empty($parentId)) {
            $id = $sgOrderItem->getItemNumber();
            if (strpos($id, "_") !== false) {
                $productIdArr = explode('_', $id);

                return $productIdArr[0];
            }

            return $id;
        }

        return $parentId;
    }

    /**
     * generate the products attribute data for export
     *
     * @param $id
     *
     * @return array
     */

    public function getAttributes($id)
    {
        $sgAttributes = array();
        if (class_exists('xt_master_slave_functions', false) && method_exists(
                'xt_master_slave_functions',
                'returnSelectedSlaveAttributes'
            )
        ) {
            $veytonAttributes = xt_master_slave_functions::returnSelectedSlaveAttributes($id);
            foreach ($veytonAttributes as $veytonAttribute) {
                $sgAttributes[] = array(
                    'name'  => $veytonAttribute['group_name'],
                    'value' => $veytonAttribute['option_name'],
                );
            }
        } elseif (class_exists('master_slave_products', false) && method_exists(
                'master_slave_products',
                'getFullAttributesData'
            )
        ) {
            $veytonAttributes = master_slave_products::getFullAttributesData($id);
            foreach ($veytonAttributes as $veytonAttribute) {
                $sgAttributes[] = array(
                    'name'  => $veytonAttribute['option_name'],
                    'value' => $veytonAttribute['option_value_name'],
                );
            }
        }

        return $sgAttributes;
    }

    /**
     * generate the query for reading the products data from the database
     *
     * @return string
     */
    public function getProductQuery()
    {
        $this->log(
            "build SQL for getting all products...",
            ShopgateLogger::LOGTYPE_DEBUG
        );

        // default fieldlist
        $productsFieldList = array(
            'p.products_id',
            'p.products_model',
            'pd.products_name',
            'pd.products_description',
            'pd.products_short_description',
            'pd.products_keywords',
            'p.products_ean',
            'p.products_quantity',
            'p.products_average_quantity',
            'p.products_price',
            'p.products_image',
            'p.last_modified',
            'p.products_weight',
            'p.products_status',
            'm.manufacturers_name',
            'ssd1.status_name AS shipping_status',
            'ssd2.status_name AS vpe_status',
            'p.products_tax_class_id',
            'p.products_vpe_status',
            'p.products_vpe',
            'p.products_vpe_value',
            'p.products_sort',
            'p.products_fsk18',
            'p.date_available',
            'p.date_added',
        );

        // the field products_options_flag is no longer available in version 4.02.59 but testing with a 4.0.0 version was not possible so the version 4.0.0 is guessed
        if ($this->checkPluginHelper->checkPlugin('xt_product_options', '2.4.0')
            && !$this->checkPluginHelper->checkPlugin('xt_product_options', '4.0.0')
        ) {
            $productsFieldList[] = 'products_options_flag';
            $productsFieldList[] = 'products_options_active_flag';
        }

        if ($this->checkPluginHelper->checkPlugin('xt_master_slave')) {
            if (version_compare(_SYSTEM_VERSION, "4.2.0", "<")) {
                $productsFieldList[] = 'p.products_startpage';
                $productsFieldList[] = 'p.products_startpage_sort';
            } else {
                $productsFieldList[] = 'p_tmp.products_startpage';
                $productsFieldList[] = 'p_tmp.products_startpage_sort';
            }
            $productsFieldList[] = 'p.products_master_flag';
        }

        // find products
        $qry = "SELECT DISTINCT " . implode(",\n", $productsFieldList);

        $qry
            .= "
            FROM " . TABLE_PRODUCTS . " p

            JOIN " . TABLE_PRODUCTS_DESCRIPTION . " pd ON pd.products_id = p.products_id
            LEFT JOIN " . TABLE_MANUFACTURERS . " m ON (m.manufacturers_id = p.manufacturers_id AND m.manufacturers_status = 1)
            LEFT JOIN " . TABLE_SYSTEM_STATUS_DESCRIPTION
            . " ssd1 ON (p.products_shippingtime = ssd1.status_id AND ssd1.language_code = '"
            . $this->languageCode . "')
            LEFT JOIN " . TABLE_SYSTEM_STATUS_DESCRIPTION
            . " ssd2 ON (p.products_vpe = ssd2.status_id AND ssd2.language_code = '"
            . $this->languageCode . "')
            LEFT JOIN " . TABLE_PRODUCTS_PERMISSION
            . " pm ON (pm.pid = p.products_id AND pm.pgroup = 'shop_"
            . $this->shopId . "') " .
            ($this->checkPluginHelper->checkPlugin('xt_master_slave')
            && version_compare(
                _SYSTEM_VERSION,
                "4.2.0",
                ">="
            )
                ? "LEFT JOIN " . DB_PREFIX
                . "_tmp_products AS p_tmp ON p.products_id = p_tmp.products_id "
                : "")
            . "WHERE ( p.products_digital = 0 OR p.products_digital IS NULL )
                AND p.products_status = 1 AND pd.language_code = '" . $this->languageCode . "'
        ";

        if (!empty($this->exportUids)) {
            $qry .= " AND  p.products_id IN (" . implode(',', $this->exportUids) . ")";
        }

        if ($this->checkPluginHelper->checkPlugin('xt_master_slave')) {
            $qry .= " AND (p.products_master_model = '' OR p.products_master_model IS NULL)";
        }

        if ($this->checkColumn(TABLE_PRODUCTS_DESCRIPTION, 'products_store_id')) {
            $qry .= " AND pd.products_store_id = " . $this->shopId;
        }

        if ($this->permissionBlacklist) {
            $qry .= " AND (pm.permission IS NULL OR pm.permission = 0)";
        } else {
            $qry .= " AND (pm.permission IS NOT NULL AND pm.permission = 1)";
        }

        $this->log(
            "execute SQL products_sort ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );

        // This is needed because of the splitted export. Otherwise we will get duplicate products on some systems out there
        $qry .= ' ORDER BY p.products_id ';

        if (!is_null($this->exportLimit) && !is_null($this->exportOffset)) {
            $qry .= " LIMIT {$this->exportOffset}, {$this->exportLimit}";
        }

        $this->log(
            "execute SQL get products ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );

        return $qry;
    }

    /**
     * calculate the max order value to products
     *
     * @return mixed
     */
    public function getMaxProductsSort()
    {
        $maxSort = $this->db->GetOne(
            "SELECT MAX(products_sort) FROM " . TABLE_PRODUCTS
        );

        return $maxSort + 10000;
    }

    /**
     * read the stock data from the database
     *
     * @return array
     */
    public function getStockRules()
    {
        // Get average quantity status rules & descriptions ( array(<trigger-percentage> => <status-name>) )
        $qry
            = "
            SELECT
                ss.status_values,
                ssd.status_name
            FROM " . TABLE_SYSTEM_STATUS . " ss
            JOIN " . TABLE_SYSTEM_STATUS_DESCRIPTION . " ssd
                ON ((ss.status_id = ssd.status_id) AND (ssd.language_code = '"
            . $this->languageCode . "'))
            WHERE ss.status_class = 'stock_rule'";

        $rulesResult = $this->db->Execute($qry);
        $rules       = array();
        while (!empty($rulesResult) && !$rulesResult->EOF) {
            $rule                                       = $rulesResult->fields;
            $trigger                                    = unserialize(
                $rule['status_values']
            );
            $rules[(int)$trigger['data']['percentage']] = $rule['status_name'];
            $rulesResult->MoveNext();
        }
        ksort($rules);

        return $rules;
    }

    /**
     * creates a category tree to an product.
     * if there is one category deactivated in the category path, the whole path will be ignored
     *
     * @param int $item
     *
     * @return string
     */
    public function getCategories($item)
    {
        $this->log(
            "execute _getCategories() ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );
        $catIds = $this->getProductCategoryIds($item["products_id"]);
        $path   = array();

        foreach ($catIds as $catId) {
            $_path = $this->getCategoryPaths($catId);

            if (!empty($_path)) {
                $path[] = $_path;
            }
        }
        $path = implode("||", $path);

        return $path;
    }

    /**
     * read all product ids to an category from the database
     *
     * @param       $productId
     * @param array $catSort
     *
     * @return array
     */
    public function getProductCategoryIds($productId, &$catSort = array())
    {
        $this->log(
            "execute _getProductCategoryIds() ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );

        $qry
            = "
            SELECT
            ptc.categories_id,
            p.products_sorting,
            p.products_sorting2
            FROM " . TABLE_PRODUCTS_TO_CATEGORIES . " ptc
            JOIN " . TABLE_CATEGORIES . " p ON (ptc.categories_id = p.categories_id)
            LEFT JOIN " . TABLE_CATEGORIES_PERMISSION
            . " cm ON (cm.pid = ptc.categories_id AND cm.pgroup = 'shop_"
            . $this->shopId . "')
            WHERE ptc.products_id = " . $productId . "
        ";

        if ($this->permissionBlacklist) {
            $qry .= "AND (cm.permission IS NULL OR cm.permission = 0)";
        } else {
            $qry .= "AND (cm.permission IS NOT NULL AND cm.permission = 1)";
        }
        $result = $this->db->Execute($qry);

        $catIds = array();
        while (!$result->EOF) {
            $catIds[] = $result->fields["categories_id"];

            $catSort[$result->fields["categories_id"]] = array(
                "field" => $result->fields["products_sorting"],
                "order" => $result->fields["products_sorting2"],
            );

            $result->MoveNext();
        }

        return $catIds;
    }

    /**
     * generates a single category path
     *
     * attention: recursion!!!
     *
     * @param int $catId
     *
     * @return string
     */
    public function getCategoryPaths($catId)
    {
        global $language;

        $this->log(
            "execute _getCategoryPaths() catId = " . $catId . " ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );
        $path = "";

        $qry
            = "
            SELECT
                c.categories_id,
                c.parent_id,
                cd.categories_name,
                c.categories_status
            FROM " . TABLE_CATEGORIES . " c
            JOIN " . TABLE_CATEGORIES_DESCRIPTION . " cd ON c.categories_id = cd.categories_id
            LEFT JOIN " . TABLE_CATEGORIES_PERMISSION
            . " cm ON (cm.pid = c.categories_id AND cm.pgroup = 'shop_"
            . $this->shopId . "')
            WHERE cd.language_code = '" . $language->code . "'
              AND c.categories_id = $catId
        ";

        if ($this->permissionBlacklist) {
            $qry .= "AND (cm.permission IS NULL OR cm.permission = 0)";
        } else {
            $qry .= "AND (cm.permission IS NOT NULL AND cm.permission = 1)";
        }

        $result = $this->db->GetRow($qry);

        $path = $result["categories_name"];
        if (!empty($result["parent_id"]) && $result["parent_id"] != $catId) {
            $_path = $this->getCategoryPaths($result["parent_id"]);

            if (empty($_path)) {
                return "";
            }

            $path = $_path . (!empty($path)
                    ? "=>"
                    : "") . $path;
        }

        return $path;
    }

    /**
     * use the veyton logic to
     *
     * @param      $productPrice
     * @param      $productTaxClassId
     * @param bool $plain
     *
     * @return mixed
     */
    private function getProductPriceData($productPrice, $productTaxClassId, $plain = false)
    {
        $priceData = $this->price->buildPriceData($productPrice, $productTaxClassId);

        return $plain
            ? $priceData["plain"]
            : $priceData;
    }

    /**
     * Alle Bilder zum angegebenen Artikel holen
     *
     * @param array $item
     *
     * @return string[] an array of URLs to the images for the product
     */
    public function getProductImages($item)
    {
        $this->log(
            "execute _getProductImages() ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );
        $images = array();

        if (!empty($item["products_image"])) {
            $this->addImageToStack($item["products_image"], $images);
        }

        global $db;

        $qry = "SELECT m.file
                FROM " . TABLE_MEDIA_LINK . " ml
                JOIN " . TABLE_MEDIA . " m ON ml.m_id = m.id
                WHERE ml.class = 'product'
                  AND ml.type='images'
                  AND ml.link_id = '" . $item["products_id"] . "'
                ORDER BY ml.sort_order";

        $imageResult = $db->Execute($qry);

        while (!$imageResult->EOF) {
            $this->addImageToStack($imageResult->fields["file"], $images);
            $imageResult->MoveNext();
        }

        return $images;
    }

    /**
     * add one image url to the image url stack
     *
     * @param string $image
     * @param        $stack
     */
    public function addImageToStack($image, &$stack)
    {
        $webPrefix = _SYSTEM_BASE_HTTP . _SRV_WEB . _SRV_WEB_IMAGES;
        $imgSrc    = _SRV_WEBROOT . "/" . _SRV_WEB_IMAGES;

        $subFolders = array('org', 'popup', 'info', 'thumb');
        foreach ($subFolders as $subFolder) {
            $path = $imgSrc . $subFolder . "/" . $image;
            $url  = $webPrefix . $subFolder . "/" . $image;

            if (file_exists($path)) {
                $stack[] = $url;

                return;
            }
        }
    }

    /**
     * set price data
     *
     * @param $item
     * @param $unitAmount
     * @param $priceData
     * @param $oldPriceData
     */
    public function getProductPrice(
        $item,
        &$unitAmount,
        &$priceData,
        &$oldPriceData
    ) {
        $priceData    = $this->getProductPriceData(
            $item["products_price"],
            $item["products_tax_class_id"]
        );
        $unitAmount   = $priceData["plain"];
        $specialPrice = $this->getSpecialPrice($item["products_id"]);
        $oldPriceData = null;
        if ($specialPrice != "na") {
            $specialPrice = $this->price->buildPriceData(
                $specialPrice,
                $item["products_tax_class_id"]
            );

            if ($specialPrice["plain"] < $priceData["plain"]) {
                $oldPriceData = $priceData;
                $priceData    = $specialPrice;
            }

            $unitAmount = $priceData["plain"];
        }
    }

    /**
     * prettify price data
     *
     * @param $uId
     * @param $quantity
     *
     * @return null|string
     */
    public function getAmountInfoTextToProduct($uId, $quantity)
    {
        global $price, $system_status;

        $amountInfoText = null;
        $veytonProduct  = new product($uId, 'default', $quantity);

        if (!empty($veytonProduct)) {
            $factor = $veytonProduct->data['products_vpe_value'] != 0.0
                ? $veytonProduct->data['products_vpe_value']
                : 1;

            $base_price_plain = $veytonProduct->data['products_price']['plain'] * (1 / $factor);
            $base_price       = $price->_StyleFormat($base_price_plain);

            $unitId = $veytonProduct->data['products_vpe']
                ? $veytonProduct->data['products_vpe']
                : $veytonProduct->data['products_unit'];

            $basePriceUnit = $system_status->values['base_price'][$unitId]['name'];

            if (empty($basePriceUnit)) {
                return $amountInfoText;
            }

            $amountInfoText = strip_tags(
                $base_price . ' ' . TEXT_SHIPPING_BASE_PER . ' ' . $basePriceUnit
            );
        }

        return str_replace("\n", '<br />', $amountInfoText);
    }

    /**
     * get description type regarding the setting of the shop system
     *
     * @param $type
     * @param $item
     *
     * @return string
     */
    public function getDescriptionToProduct($type, $item)
    {
        switch ($type) {
            case ShopgateConfigVeyton::EXPORT_DESCRIPTION:
                $productsDescription = $item["products_description"];
                break;
            case ShopgateConfigVeyton::EXPORT_SHORTDESCRIPTION:
                $productsDescription = $item["products_short_description"];
                break;
            case ShopgateConfigVeyton::EXPORT_DESCRIPTION_SHORTDESCRIPTION:
                $productsDescription
                    = $item["products_description"] . "<br/><br/>"
                    . $item["products_short_description"];
                break;
            case ShopgateConfigVeyton::EXPORT_SHORTDESCRIPTION_DESCRIPTION:
                $productsDescription
                    = $item["products_short_description"] . "<br/><br/>"
                    . $item["products_description"];
                break;
            default:
                $productsDescription = $item["products_description"];
                break;
        }

        return $productsDescription;
    }

    /**
     * check if the plugin xt_product_options and xt_master_slave are installed
     *
     * hint: This constellation is not supported yet
     *
     * @param $item
     *
     * @return bool
     */
    public function hasProductOptionsAndMasterSlaveRelation($item)
    {
        // the field products_options_flag is no longer available in version 4.02.59 but
        // testing with a 4.0.0 version was not possible so the version 4.0.0 is guessed
        if ($this->checkPluginHelper->checkPlugin('xt_product_options', '2.4.0')
            && !$this->checkPluginHelper->checkPlugin('xt_product_options', '4.0.0')
            && $item['products_options_flag'] == 1
            && $item['products_options_active_flag'] == 1
            && ($this->checkPluginHelper->checkPlugin('xt_master_slave')
                && $item['products_master_flag'] == 1)
        ) {
            return true;
        }

        return false;
    }

    /**
     * check if the plugin xt_product_options and xt_master_slave are installed
     *
     * @param $item
     *
     * @return bool
     */
    public function hasProductOptions($item)
    {
        // the field products_options_flag is no longer available in version 4.02.59 but
        // testing with a 4.0.0 version was not possible so the version 4.0.0 is guessed
        if (($this->checkPluginHelper->checkPlugin('xt_product_options', '2.4.0')
                && !$this->checkPluginHelper->checkPlugin('xt_product_options', '4.0.0')
                && $item['products_options_flag'] == 1
                && $item['products_options_active_flag'] == 1
                && (!$this->checkPluginHelper->checkPlugin('xt_master_slave')
                    || $item['products_master_flag'] == 0))
            || ($this->checkPluginHelper->checkPlugin('xt_product_options', '4.0.0'))
        ) {
            return true;
        }

        return false;
    }

    /**
     * check if a product has a master slave relation
     *
     * @param $item
     *
     * @return bool
     */
    public function hasProductMasterSlaveRelation($item)
    {
        if ($this->checkPluginHelper->checkPlugin('xt_master_slave')
            && $item["products_master_flag"] == "1"
            && !empty($item["products_model"])
        ) {
            return true;
        }

        return false;
    }

    /**
     * prepare option data to an product for csv export
     *
     * data structure:
     *
     * [<group_id>][n] => array(
     *   "value_id" => <value_id>,
     *   "value" => "<VALUE>",
     *   "price_offset" => <Price>
     * )
     *
     * @param $item
     *
     * @return array
     */
    public function generateOptionDataForCsv($item)
    {
        /**
         */
        $result  = $this->getOptionsToProduct($item["products_id"]);
        $options = array();

        while (!empty($result) && !$result->EOF) {
            $option_field    = ($result->fields['option_value_field'])
                ? $result->fields['option_value_field']
                : $result->fields['option_group_field'];
            $option_required = ($result->fields['option_required'])
                ? $result->fields['option_required']
                : $result->fields['option_value_default_required'];
            $option_price    = $this->price->_BuildPrice(
                ($result->fields['option_price'])
                    ? $result->fields['option_price']
                    : $result->fields['option_value_default_price'],
                $item["products_tax_class_id"]
            );
            $option_p_prefix = ($result->fields['option_p_prefix'])
                ? $result->fields['option_p_prefix']
                : $result->fields['option_value_default_p_prefix'];

            $oprice = "";
            if ($option_p_prefix == "-") {
                $oprice = "-";
            }
            $oprice .= ((float)$option_price * 100);

            if (in_array($option_field, array('select', 'radio'))) {
                if (!isset($options["options"][$result->fields["option_group_id"]])) {
                    $options["options"][$result->fields["option_group_id"]]
                        = array("group" => array(), "values" => array());
                }

                $options["options"][$result->fields["option_group_id"]]["group"]
                    = array(
                    "group_id"   => $result->fields["option_group_id"],
                    "group_name" => $result->fields["option_group_name"],
                );

                $options["options"][$result->fields["option_group_id"]]["values"][]
                    = array(
                    "value_id"     => $result->fields["option_value_id"],
                    "value"        => $result->fields["option_value_name"],
                    "price_offset" => $this->priceHelper->formatPriceNumber(
                        $oprice,
                        0
                    ),
                );
            }

            if (in_array($option_field, array('input', 'text', 'textarea'))) {
                $options["inputs"][] = array(
                    "group_id"     => $result->fields["option_group_id"],
                    "group_name"   => $result->fields["option_group_name"],
                    "value_id"     => $result->fields["option_value_id"],
                    "value_name"   => $result->fields["option_value_name"],
                    "price_offset" => $this->priceHelper->formatPriceNumber(
                        $oprice,
                        0
                    ),
                    "required"     => ($option_required === 'true')
                        ? true
                        : '',
                );
            }

            if ($option_field == 'checkbox') {
                if (!isset(
                    $options["options"][$result->fields["option_group_id"] . '_'
                    . $result->fields["option_value_id"]]
                )
                ) {
                    $options["options"][$result->fields["option_group_id"] . '_'
                    . $result->fields["option_value_id"]]
                        = array("group" => array(), "values" => array());
                }

                $options["options"][$result->fields["option_group_id"] . '_'
                . $result->fields["option_value_id"]]["group"]
                    = array(
                    "group_id"   => $result->fields["option_group_id"] . '_'
                        . $result->fields["option_value_id"],
                    "group_name" => $result->fields["option_group_name"] . ': '
                        . $result->fields["option_value_name"],
                );

                $options["options"][$result->fields["option_group_id"] . '_'
                . $result->fields["option_value_id"]]["values"]
                    = array(
                    array(
                        "value_id"     => 0,
                        "value"        => 'nein',
                        "price_offset" => $this->priceHelper->formatPriceNumber(
                            0,
                            0
                        ),
                    ),
                    array(
                        "value_id"     => 1,
                        "value"        => 'ja',
                        "price_offset" => $this->priceHelper->formatPriceNumber(
                            $oprice,
                            0
                        ),
                    ),
                );
            }

            $result->MoveNext();
        }

        return $options;
    }

    /**
     * prepare option data to an product for xml export
     *
     * @param $item
     *
     * @return array
     */
    public function generateOptionDataForXml($item)
    {
        $options = $this->generateOptionDataForCsv($item);
        $inputs  = array();

        if (is_array($options['options'])) {
            foreach ($options['options'] as $optionGroupId => $data) {
                $optionValues = array();

                foreach ($data["values"] as $value) {
                    $inputOption = new Shopgate_Model_Catalog_Option();
                    $inputOption->setUid($value["value_id"]);
                    $inputOption->setLabel($value["value"]);
                    $inputOption->setAdditionalPrice($value["price_offset"]);
                    $optionValues[] = $inputOption;
                }

                $inputItem = new Shopgate_Model_Catalog_Input();
                $inputItem->setUid($optionGroupId);
                $inputItem->setLabel($data["group_name"]);
                $inputItem->setType(Shopgate_Model_Catalog_Input::DEFAULT_INPUT_TYPE_SELECT);
                $inputItem->setOptions($optionValues);

                $inputs[] = $inputItem;
            }
        }

        if (is_array($options['inputs'])) {
            foreach ($options['inputs'] as $input) {
                $label = $input["group_name"]
                    . ': ' . $input["value_name"];
                $uid   = $input["group_id"] . '_' . $input["value_id"];

                $inputItem = new Shopgate_Model_Catalog_Input();
                $inputItem->setUid($uid);
                $inputItem->setLabel($label);
                $inputItem->setType(Shopgate_Model_Catalog_Input::DEFAULT_INPUT_TYPE_TEXT);
                $inputItem->setRequired((bool)$input["required"]);
                $inputItem->setAdditionalPrice($input["price_offset"] / 100);

                $inputs[] = $inputItem;
            }
        }

        return $inputs;
    }

    /**
     * read attribute data from database by the uid of the product
     *
     * @param $item
     *
     * @return mixed
     */
    public function getAttributesToProduct($item)
    {
        // default fieldlist
        $productsFieldList = array(
            'DISTINCT p.products_id',
            'p.products_model',
            'p.products_master_model',
            'pd.products_name',
            'pd.products_description',
            'pd.products_keywords',
            'p.products_ean',
            'p.products_quantity',
            'p.products_average_quantity',
            'p.products_price',
            'p.products_image',
            'p.last_modified',
            'p.products_weight',
            'p.products_status',
            'm.manufacturers_name',
            'ssd1.status_name AS shipping_status',
            'ssd2.status_name AS vpe_status',
            'p.products_tax_class_id',
            'p.products_vpe_status',
            'p.products_vpe',
            'p.products_vpe_value',
            'p.products_sort',
            'p.products_fsk18',
        );

        $qry
            = "
            SELECT " . implode(",\n", $productsFieldList) . "

            FROM " . TABLE_PRODUCTS . " p

            LEFT JOIN " . TABLE_PRODUCTS_DESCRIPTION . " pd ON pd.products_id = p.products_id
            LEFT JOIN " . TABLE_MANUFACTURERS . " m ON m.manufacturers_id = p.manufacturers_id
            LEFT JOIN " . TABLE_SYSTEM_STATUS_DESCRIPTION
            . " ssd1 ON (p.products_shippingtime = ssd1.status_id AND ssd1.language_code = '"
            . $this->languageCode . "')
            LEFT JOIN " . TABLE_SYSTEM_STATUS_DESCRIPTION
            . " ssd2 ON (p.products_vpe = ssd2.status_id AND ssd2.language_code = '"
            . $this->languageCode . "')

            WHERE (p.products_master_flag = 0 OR p.products_master_flag IS NULL)
                AND (p.products_digital = 0 OR p.products_digital IS NULL)
                AND p.products_status = 1
                AND p.products_master_model = '" . $item["products_model"] . "'
                AND pd.language_code = '" . $this->languageCode . "'
        ";

        if ($this->checkColumn(TABLE_PRODUCTS_DESCRIPTION, 'products_store_id')) {
            $qry .= " AND pd.products_store_id = " . $this->shopId;
        }

        $qry .= " ORDER BY p.products_id";

        return $this->db->Execute($qry);
    }

    /**
     * read option data from database by the uid of the product
     *
     * @param $uId
     *
     * @return mixed
     */
    public function getOptionsToProduct($uId)
    {
        $this->log(
            "execute _getOptionValues() ...",
            ShopgateLogger::LOGTYPE_DEBUG
        );

        $qry
            = "
        SELECT
            pto.products_id,
            pto.option_group_id,
            pov.option_value_id,
            pog.option_group_field,
            pov.option_value_field,
            pogd.option_group_name,
            povd.option_value_name,
            pto.option_required,
            pov.option_value_default_required,
            pto.option_price,
            pov.option_value_default_price,
            pto.option_p_prefix,
            pov.option_value_default_p_prefix
        FROM " . DB_PREFIX . "_plg_product_to_options pto
        JOIN " . DB_PREFIX . "_plg_product_option_groups pog ON (pog.option_group_id = pto.option_group_id AND pog.status = 1)
        JOIN " . DB_PREFIX . "_plg_product_option_groups_description pogd ON (pogd.option_group_id = pog.option_group_id AND pogd.language_code = '"
            . $this->languageCode . "')
        JOIN " . DB_PREFIX . "_plg_product_option_values pov ON (pov.option_value_id = pto.option_value_id AND pov.status = 1)
        JOIN " . DB_PREFIX . "_plg_product_option_values_description povd ON (povd.language_code = '"
            . $this->languageCode . "' AND povd.option_value_id = pto.option_value_id)
        WHERE pto.products_id = " . $uId . "  AND pto.option_status = 1
        ORDER BY pto.option_group_id, pog.sort_order, pto.option_value_id, pov.sort_order
        ";

        return $this->db->Execute($qry);
    }

    /**
     * calculate the shipping costs regarding the plugin "xt_sperrgut"
     *
     * @param array $item
     * @param       $product
     *
     * @return float
     */
    public function getShippingCostPerUnitToProduct($item, $product)
    {
        $this->log("execute itemExportAdditionalShippingCostsPerUnit() ...", ShopgateLogger::LOGTYPE_DEBUG);

        $additionalShipping = 0;
        if ($this->checkPluginHelper->checkPlugin("xt_sperrgut")) {
            $bulk               = $this->getXtSperrgut($product["products_id"]);
            $additionalShipping = $bulk['plain'];
        }

        return $this->priceHelper->formatPriceNumber($additionalShipping);
    }

    /**
     * Adds refund pricing to the product if the plugin is enabled.
     *
     * @param mixed[] $itemArr The item array to be modified for export.
     * @param mixed[] $item    The item array fetched from the database.
     *
     * @return mixed[] The modified item array for export
     */
    public function itemExportAddRefund($itemArr, $item)
    {
        return $itemArr;
    }

    /**
     * Get the bulk shipping price for the product from the database
     *
     * Requires veyton plugin "xt_sperrgut"
     *
     * @param int $productId
     *
     * @return array<string, mixed>
     */
    public function getXtSperrgut($productId)
    {
        $this->log("execute getXtSperrgut() ...", ShopgateLogger::LOGTYPE_DEBUG);

        if ($this->checkPluginHelper->checkPlugin("xt_sperrgut")) {
            $qry = "SELECT s.price
                FROM `" . DB_PREFIX . "_sperrgut` s
                JOIN `" . TABLE_PRODUCTS . "` p ON ( p.xt_sperrgut_class = s.id )
                WHERE p.products_id = {$productId}";

            $bulk = $this->db->Execute($qry);

            if ($bulk->fields) {
                $priceData = $this->price->buildPriceData(
                    $bulk->fields["price"],
                    XT_SPERRGUT_TAX_CLASS
                );
            }
        }

        return $priceData;
    }

    /**
     * @param int $productId
     *
     * @return array
     */
    public function getGroupPricesToProduct($productId)
    {
        $this->log("execute _getGroupPrices() ...", ShopgateLogger::LOGTYPE_DEBUG);

        if (DB_PREFIX != '') {
            $DB_PREFIX = DB_PREFIX . '_';
        } else {
            define('DB_PREFIX', 'xt');
            $DB_PREFIX = DB_PREFIX . '_';
        }

        $qry    = "SELECT *
                FROM " . $DB_PREFIX . "products_price_group_all
                WHERE products_id = $productId
                ORDER BY discount_quantity ASC";
        $result = $this->db->Execute($qry);

        $groupPrices = array();

        while (!$result->EOF) {
            $gPrice        = $result->fields;
            $groupPrices[] = array(
                'price'    => $gPrice["price"],
                'qty'      => $gPrice["discount_quantity"],
                'group_id' => null,
            );
            $result->MoveNext();
        }

        $qry = "
            SELECT customers_status_id
            FROM " . $DB_PREFIX . "customers_status
        ";

        $result = $this->db->Execute($qry);
        while (!$result->EOF) {
            $customerGroup   = $result->fields;
            $customerGroupId = $customerGroup['customers_status_id'];

            $groupTableExistQuery =
                "SHOW TABLES LIKE '" . $DB_PREFIX . "products_price_group_" . $customerGroupId . "'";
            $groupResult          = $this->db->Execute($groupTableExistQuery);

            if ($groupResult->_numOfRows > 0) {
                $qry                      = "SELECT * FROM " . $DB_PREFIX . "products_price_group_" . $customerGroupId . "
                        WHERE products_id = $productId
                        ORDER BY discount_quantity ASC";
                $customerGroupPriceResult = $this->db->Execute($qry);
                while (!$customerGroupPriceResult->EOF) {
                    $gPrice        = $customerGroupPriceResult->fields;
                    $groupPrices[] = array(
                        'price'    => $gPrice["price"],
                        'qty'      => $gPrice["discount_quantity"],
                        'group_id' => $customerGroupId,
                    );
                    $customerGroupPriceResult->MoveNext();
                }
            }
            $result->MoveNext();
        }

        return $groupPrices;
    }

    /**
     * Findet den Aktuellen Sonderpreis und liefert diesen zurück.
     * Wird kein Sonderpreis gefunden, wird 'na' zurück gegeben.
     *
     * @param int $productId
     *
     * @return int
     */
    private function getSpecialPrice($productId)
    {
        global $db;

        $this->log("execute _getSpecialPrice() ...", ShopgateLogger::LOGTYPE_DEBUG);

        $groupCondition = (empty($this->defaultUserGroupId))
            ? ''
            : 'AND (group_permission_' . $this->defaultUserGroupId . ' = 1 OR group_permission_all = 1)';

        $qry    = "SELECT *
                FROM " . TABLE_PRODUCTS_PRICE_SPECIAL . "
                WHERE status = 1
                    AND products_id  = {$productId}
                    {$groupCondition}
                    AND (date_available <= NOW() or date_available = 0)
                    AND (date_expired >= NOW() or date_expired = 0)";
        $result = $db->Execute($qry);

        $specialPrice = "na";

        while (!$result->EOF) {
            $price = $result->fields["specials_price"];
            if ($specialPrice == "na" || $specialPrice > $price) {
                $specialPrice = $price;
            }

            $result->MoveNext();
        }

        return $specialPrice;
    }

    /**
     * @return array
     */
    public function getSeoUrls()
    {
        $this->log("execute SQL seo urls...", ShopgateLogger::LOGTYPE_DEBUG);
        $qry           = "SELECT
                                seo.url_text,
                                seo.link_id,
                                seo.link_type
                            FROM " . TABLE_SEO_URL . " seo
                            WHERE seo.language_code = '" . $this->languageCode . "' AND seo.link_type = 1";
        $seoUrlsResult = $this->db->Execute($qry);

        $seoUrls = array();
        while (!empty($seoUrlsResult) && !$seoUrlsResult->EOF) {
            $seoUrl = $seoUrlsResult->fields;

            $seoUrls[$seoUrl['link_id']]
                = trim(_SYSTEM_BASE_HTTP . _SRV_WEB, '/') . '/'
                . $seoUrl['url_text'] . (_SYSTEM_SEO_FILE_TYPE !== ""
                    ?
                    '.' . _SYSTEM_SEO_FILE_TYPE
                    : '');
            $seoUrlsResult->MoveNext();
        }

        return $seoUrls;
    }

    /**
     * @param mixed[] $item Item data from the Veyton database
     *
     * @return string
     */
    public function generateAvailableText($item)
    {
        if (empty($item['date_available'])) {
            return $item["shipping_status"];
        }

        $availableDate = strtotime($item['date_available']);
        if ($availableDate <= time()) {
            return $item["shipping_status"];
        } else {
            return TEXT_PRODUCT_AVAILABLE . ' ' . date('d.m.Y', $availableDate);
        }
    }

    /**
     * Checks fsk18 value and sets age rating accordingly
     *
     * @param array $item
     *
     * @return string
     */
    public function generateAgeRating($item)
    {
        return $item['products_fsk18'] == 1
            ? '18'
            : '';
    }

    /**
     * @param array $item
     *
     * @return array
     */
    public function generateTags($item)
    {
        $tags   = explode(',', trim($item['products_keywords']));
        $tagArr = array();
        foreach ($tags as $tag) {
            if (!ctype_space($tag) && !empty($tag)) {
                $tagItemObject = new Shopgate_Model_Catalog_Tag();
                $tagItemObject->setValue(trim($tag));
                $tagArr[] = $tagItemObject;
            }
        }

        return $tagArr;
    }

    /**
     * Generates relations to other products.
     *
     * @param array $item
     *
     * @return array
     */
    public function generateRelatedShopItems($item)
    {
        global $db;

        $relatedItems = array();

        $this->log("execute _getRelatedShopItems() ...", ShopgateLogger::LOGTYPE_DEBUG);

        $qry = "SELECT p.products_id
                FROM " . TABLE_PRODUCTS_CROSS_SELL . " xsell
                    JOIN " . TABLE_PRODUCTS . " p ON p.products_id = xsell.products_id_cross_sell
                    JOIN " . TABLE_PRODUCTS_TO_CATEGORIES . " pcat ON pcat.products_id = p.products_id
                    LEFT JOIN " . TABLE_PRODUCTS_PERMISSION . " pm ON (pm.pid = p.products_id AND pm.pgroup = 'shop_"
            . $this->shopId . "')
                WHERE xsell.products_id = {$item['products_id']}
                  AND ( p.products_digital = 0 OR p.products_digital IS NULL )
                  AND p.products_status = 1
                  " . ($this->checkPluginHelper->checkPlugin('xt_master_slave')
                ? " AND (p.products_master_model = '' OR p.products_master_model IS NULL)"
                : "");

        if ($this->permissionBlacklist) {
            $qry .= "AND (pm.permission IS NULL OR pm.permission = 0)";
        } else {
            $qry .= "AND (pm.permission IS NOT NULL AND pm.permission = 1)";
        }

        $result = $db->Execute($qry);

        $xSellProductsNumbers = array();

        while (!$result->EOF) {
            $xSellProductsNumbers[] = $result->fields["products_id"];

            $result->MoveNext();
        }

        if (!empty($xSellProductsNumbers)) {
            $crossSellRelation = new Shopgate_Model_Catalog_Relation();
            $crossSellRelation->setType(Shopgate_Model_Catalog_Relation::DEFAULT_RELATION_TYPE_UPSELL);
            $crossSellRelation->setValues($xSellProductsNumbers);

            $relatedItems[] = $crossSellRelation;
        }

        return $relatedItems;
    }

    /**
     * generate the seo url deeplink to an product
     *
     * @param array $item
     * @param array $seoUrls
     *
     * @return string
     */
    public function generateSeoUrl($item, $seoUrls)
    {
        if (_SYSTEM_MOD_REWRITE == "true" && isset($seoUrls[$item['products_id']])) {
            $urlDeeplink = $seoUrls[$item['products_id']];
        } else {
            $urlDeeplink = _SYSTEM_BASE_HTTP . _SRV_WEB . "index.php?page=product&info=" . $item['products_id'];
        }

        return $urlDeeplink;
    }

    /**
     * generates the properties to an product
     *
     * @param array $item
     * @param array $statusRules
     *
     * @return array
     */
    public function generatePropertiesToProduct($item, $statusRules)
    {
        $properties = array();
        if ($item['products_quantity'] < $item['products_average_quantity']) {
            if ($item['products_average_quantity'] == 0) {
                $realPercentage = 0;
            } else {
                $realPercentage = (int)($item['products_quantity'] / $item['products_average_quantity'] * 100);
            }

            if ($realPercentage >= 0) {
                $selectedDescription = '';
                foreach ($statusRules as $percentage => $description) {
                    if ($realPercentage >= $percentage) {
                        $selectedDescription = $description;
                    }
                }
            } else {
                if (isset($statusRules[0])) {
                    $selectedDescription = $statusRules[0];
                }
            }

            if (!empty($selectedDescription)) {
                $label              = 'Verfügbarkeit';
                $propertyItemObject = new Shopgate_Model_Catalog_Property();
                $propertyItemObject->setUid(bin2hex($label));
                $propertyItemObject->setLabel($label);
                $propertyItemObject->setValue($selectedDescription);
                $properties[] = $propertyItemObject;
            }
        }

        return $properties;
    }

    /**
     * generates the internal order info to an product for export
     *
     * this field will be exported and added to every shopgate order
     *
     * @param array $itemArr
     * @param array $item
     *
     * @return string
     */
    public function generateInternalOrderInfo($itemArr, $item)
    {
        global $currency;

        $this->log("execute itemExportInternalOrderInfo() ...", ShopgateLogger::LOGTYPE_DEBUG);

        $itemArr['internal_order_info']['exchange_rate'] = $currency->value_multiplicator;

        if ($this->checkPluginHelper->checkPlugin('xt_sperrgut')) {
            $bulk                                          = $this->getXtSperrgut($item['products_id']);
            $itemArr['internal_order_info']['xt_sperrgut'] = $bulk['plain'];
        }

        return json_encode($itemArr['internal_order_info']);
    }
}
